@page "/"
@using OMM.Desktop.Data.OsuDataProvider
@using OMM.Desktop.Data.OmmApi
@using OMM.Desktop.Data.Settings
@using OMM.Desktop.Content.Components.MapImage
@inject OmmApiService OmmApi
@inject IOsuDataService OsuDataProvider
@implements IDisposable

<div class="@Bem.Base()">
    <MapImage SongSelection="@songSelection" MapAvailable="mapAvailable" />
    <div class="@Bem.Element("search-container")">
        <span class="@Bem.Element("search-container-label")">
            Custom Search
        </span>
        <div>
            <IconButton Text="Find matching maps"
                        IconName="fa-search"
                        Style="fas"
                        RootClass="@Bem.Element("search-button", availableFlag)"
                        OnClick="HandleSearchClick" />
        </div>
        <FilterChips FilterClass="@Filter" OnChange="HandleChipChange" />
    </div>
    @if (!isLoading)
    {
        @foreach (var map in this.mapMatches)
        {
            <MapMatchTile MapMatch="map" />
        }
    }
    else
    {
        <div class="@Bem.Element("spinner")">
            <i class="fas fa-circle-notch fa-spin"></i>
        </div>
    }
    <ErrorMessage ErrorMessages="errorMessages"
                  OnClose="HandleOnCloseClick" />
</div>

@code{
    private Bem Bem = new Bem("view-index");

    private SongSelectionChangedEventArgs songSelection;

    private List<MapMatch> mapMatches = new List<MapMatch>();

    private List<string> errorMessages = new List<string>();

    private bool mapAvailable = true;

    protected bool isLoading { get; set; } = false;

    private string availableFlag => mapAvailable ? null : "unavailable";

    private OmmApiFilterDto Filter = new OmmApiFilterDto
    {
        Amount = 10,
    };

    protected override void OnAfterRender(bool firstRender)
    {
        if (!firstRender)
            return;

        OsuDataProvider.SongChanged += this.SongChanged;
        OsuDataProvider.OldId = -1;
    }

    public void Dispose()
    {
        OsuDataProvider.SongChanged -= this.SongChanged;
    }

    private async void HandleSearchClick()
    {
        if (!this.mapAvailable)
            return;

        this.mapAvailable = false;
        this.isLoading = true;
        await InvokeAsync(() => base.StateHasChanged());

        var mapsOrErrors = await OmmApi.GetMapMatches(songSelection?.BeatmapId, Filter.Amount);

        this.isLoading = false;
        this.mapAvailable = true;

        if (mapsOrErrors.TryGetLeftValue(out var maps))
        {
            this.mapMatches = maps;
            await InvokeAsync(() => base.StateHasChanged());
            return;
        }

        this.errorMessages = mapsOrErrors.Right;
        await InvokeAsync(() => base.StateHasChanged());
    }

    private async void SongChanged(object sender, Either<SongSelectionChangedEventArgs, List<string>> argsOrErrors)
    {
        if (!argsOrErrors.TryGetLeftValue(out var song))
        {
            this.errorMessages = argsOrErrors.Right;
            await InvokeAsync(() => base.StateHasChanged());
            return;
        }

        this.mapAvailable = OmmApiService.AvailableMaps.Contains(song.BeatmapId);

        if (this.mapAvailable)
        {
            this.songSelection = song;
        }
        else
        {
            this.songSelection = null;
        }

        await InvokeAsync(() => base.StateHasChanged());
    }

    private void HandleChipChange(object o)
    {
        this.Filter = o as OmmApiFilterDto;
    }

    private async void HandleOnCloseClick()
    {
        this.errorMessages.Clear();
        await InvokeAsync(() => base.StateHasChanged());
    }
}
