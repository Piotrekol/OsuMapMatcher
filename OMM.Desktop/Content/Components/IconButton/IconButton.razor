@if (!string.IsNullOrWhiteSpace(this.Href))
{
    <a href="@Href" class="@Bem.Base() @RootClass" @onmouseover="HandleHoverEnter" @onmouseout="HandleHoverLeave">
        <label for="1234" >
            <span class="@Bem.Element("text-container", hoverFlag)">
                <span>@Text</span>
            </span>
            <span class="@Bem.Element("icon-container", hoverFlag)">
                <i class="@Style @IconName"></i>
            </span>
        </label>
    </a>
}
else
{
    <label for="1234" class="@Bem.Base() @RootClass" @onmouseover="HandleHoverEnter" @onmouseout="HandleHoverLeave" @onclick="HandleOnClick">
        <span class="@Bem.Element("text-container", hoverFlag)">
            <span>@Text</span>
        </span>
        <span class="@Bem.Element("icon-container", hoverFlag)">
            <i class="@Style @IconName"></i>
        </span>
        @if (!string.IsNullOrWhiteSpace(this.ButtonType))
        {
            <button hidden id="1234" type="@ButtonType"></button>
        }
    </label>
}


@code {
    private Bem Bem = new Bem("component-icon-button");

    public string Class { get; set; }
    [Parameter]
    public EventCallback<MouseEventArgs> OnClick { get; set; }
    [Parameter]
    public string IconName { get; set; } = "";
    [Parameter]
    public string Style { get; set; } = "";
    [Parameter]
    public string Text { get; set; } = "";
    [Parameter]
    public string RootClass { get; set; } = "";
    [Parameter]
    public string ButtonType { get; set; }
    [Parameter]
    public string Href { get; set; }

    private bool isHovered = false;

    private string hoverFlag => isHovered ? "hovered" : null;

    private void HandleHoverEnter() => isHovered = true;

    private void HandleHoverLeave() => isHovered = false;

    private void HandleOnClick(MouseEventArgs e)
    {
        if (OnClick.HasDelegate)
            OnClick.InvokeAsync(e);
    }
}