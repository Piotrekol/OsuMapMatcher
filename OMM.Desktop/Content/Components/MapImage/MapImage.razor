@using OMM.Desktop.Data.OsuDataProvider

<div class="@Bem.Base()" style="background-image: linear-gradient( rgba(0, 0, 0, @strength), rgba(0, 0, 0, @strength) ), url(@SongSelection.PathToBackgroundImage);">
    @if (MapAvailable)
    {
        <div class="@Bem.Element("text-container")">
            <span class="@Bem.Element("text")">@SongSelection.Artist</span>
            <span class="@Bem.Element("text")">Mapper: @SongSelection.MapCreator</span>
        </div>
        <div class="@Bem.Element("text-container")">
            <span class="@Bem.Element("text")">@SongSelection.Title</span>
            <span class="@Bem.Element("text")">[@SongSelection.DifficultyName]</span>
        </div>
    }
    else
    {
        <div class="@Bem.Element("text-container")">
            <span>Map unavailable</span>
        </div>
    }
</div>

@code{
    private Bem Bem = new Bem("component-map-image");

    [Parameter]
    public SongSelectionChangedEventArgs SongSelection { get; set; }
    [Parameter]
    public bool MapAvailable { get; set; }

    protected override void OnInitialized()
    {
        this.SongSelection = new SongSelectionChangedEventArgs
        {
            Artist = "",
            DifficultyName = "",
            MapCreator = "",
            PathToBackgroundImage = "",
            Title = "",
            ArtistUnicode = "",
            TitleUnicode = "",
        };
    }

    protected override void OnParametersSet()
    {
        if (!MapAvailable)
        {
            SongSelection.PathToBackgroundImage = "";
        }
    }

    private string emptyFlag => string.IsNullOrWhiteSpace(SongSelection.PathToBackgroundImage) ? "empty" : null;
    private double strength => string.IsNullOrWhiteSpace(SongSelection.PathToBackgroundImage) ? 0 : 0.25;
}